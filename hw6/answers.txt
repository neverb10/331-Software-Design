CSE 331 Homework 3.  Answers to Written questions.
Edit this file to supply your answers.

Name: Jon Luntzel

Problem 6.

(a) Fibonacci failed the testThrowsIllegalArgumentException test because it treated an n = 0 case
as a negative number with the line 'if (n <= 0) ...' To fix it I incremented n initially so that -1
would be the highest value caught by the exception code.


(b) Fibonacci failed the testBaseCase test because the case of n = 2 returned a value of 1 due
the else if branch. Part (a)'s solution fixed this as well.


(c) Fibonacci failed the testInductiveCase test because of two reasons. First, instead of adding
the previous two terms together to retrieve a new value, it calculated the difference. Second,
it did not pass in the correct n value to each term sincce they were displaced by 1. The original
code tried to add the current n term with its previous rather than the previous with the second-
previous. I changed the code from (pseudocode) 'getTerm(n-1) - getTerm(n-2)' to 
'getTerm(n-2) + getTerm(n-3)'.


Problem 7. 

(a) The constructor Ball was setting its parameter equal to itself. It sshould assign
the private field equal to the parameter passed in (this.volume = volume). 

(b) I think the second approach is the better one. We need to be able to calculate the volume
of the ball container initially and every time a ball is added. I excluded the first option because
I considered the possibility that someone could add a ball into the container and never call the
getVolume() method, in which case the volume should still be calculated. The negation would be a user
calls getVolume() but does not add any balls. This case is covered by calculating an initial volume
in the constructor.

(1) I could sort the balls by using a comparator on the ballContainer. I could also sort the balls
inside getBallsFromSmallest() manually by comparing values of the unsorted list without any helper
methods.
